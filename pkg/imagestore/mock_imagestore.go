// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carbonin/assisted-image-service/pkg/imagestore (interfaces: ImageStore)

// Package imagestore is a generated GoMock package.
package imagestore

import (
	context "context"
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockImageStore is a mock of ImageStore interface.
type MockImageStore struct {
	ctrl     *gomock.Controller
	recorder *MockImageStoreMockRecorder
}

// MockImageStoreMockRecorder is the mock recorder for MockImageStore.
type MockImageStoreMockRecorder struct {
	mock *MockImageStore
}

// NewMockImageStore creates a new mock instance.
func NewMockImageStore(ctrl *gomock.Controller) *MockImageStore {
	mock := &MockImageStore{ctrl: ctrl}
	mock.recorder = &MockImageStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageStore) EXPECT() *MockImageStoreMockRecorder {
	return m.recorder
}

// BaseFile mocks base method.
func (m *MockImageStore) BaseFile(arg0 string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseFile", arg0)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BaseFile indicates an expected call of BaseFile.
func (mr *MockImageStoreMockRecorder) BaseFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseFile", reflect.TypeOf((*MockImageStore)(nil).BaseFile), arg0)
}

// HaveVersion mocks base method.
func (m *MockImageStore) HaveVersion(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HaveVersion", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HaveVersion indicates an expected call of HaveVersion.
func (mr *MockImageStoreMockRecorder) HaveVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HaveVersion", reflect.TypeOf((*MockImageStore)(nil).HaveVersion), arg0)
}

// Populate mocks base method.
func (m *MockImageStore) Populate(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Populate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Populate indicates an expected call of Populate.
func (mr *MockImageStoreMockRecorder) Populate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Populate", reflect.TypeOf((*MockImageStore)(nil).Populate), arg0)
}
